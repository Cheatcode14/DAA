-------------------------String matching------------------------
-----------------------------------------------------------------
int valueOf(char ch)
{
    return (ch-'0');
}
bool check_characters(string T, string P, int s)
{
    int n,m,i;
    n = T.length();
    m = P.length();
    for(i=0;i<m;i++)
    {
        if(P[i]!=T[s+i+1])
            return false;
    }
    return true;
}
void rabin_karp_matcher(string T, string P, int d, int q)
{
    int n, m, h, p, t0, i,s;
    n = T.length();
    m = P.length();
    h = (int)pow(d,m-1)%q;
    //cout<<"h value is "<<h<<endl;
    p = 0;
    t0 = 0;
    for(i=0;i<m;i++)
    {
        p = (d*p + valueOf(P[i]))%q;
        t0 = (d*t0 + valueOf(T[i]))%q;
    }
    for(s=-1;s<n-m;s++)
    {
        //cout<<p<<" "<<t0<<endl;
        if(p==t0)
        {
           if (check_characters(T,P,s))
                cout<<s+1<<endl;
        }
        if(s<n-m)
            t0 = (d*(t0-valueOf(T[s+1])*h)+valueOf(T[s+m+1]))%q;
            if(t0<0){
                t0=t0+q;
            }
    }
}
--------------------------------------------------------------------------------
#include <bits/stdc++.h>

using namespace std;

void rabinKarpAlgo(string & pattern, string & text, int q) {

  int m = pattern.size();
  int n = text.size();
  int i, j, hash_p = 0, hash_t = 0, h = 1, d = m + n;

  for (i = 0; i < m - 1; i++) {
    h = (h * d) % q;
  }

  // Calculate hash value for pattern and text
  for (i = 0; i < m; i++) {
    hash_p = (pattern[i] + d * hash_p) % q;
    hash_t = (text[i] + d * hash_t) % q;
  }

  // Find the match
  for (i = 0; i <= n - m; i++) {

    // Check the hash values of current windows of text and pattern.
    if (hash_p == hash_t) {

      for (j = 0; j < m; j++) {

        if (text[i + j] != pattern[j]) break;
      }

      // if pattern == text
      if (j == m) cout << "Pattern is found at index : " << i << "\n";
    }

    // Calculate the hash value for next window : adding trailing digit 
   //and remove leading digit
    if (i < n - m) {
      hash_t = (d * (hash_t - text[i] * h) + text[i + m]) % q;

      //converting negative value of hash_t to positive.
      if (hash_t < 0) hash_t = (hash_t + q);
    }
  }
}

int main() {
  string text = "GEEKS FOR GEEKS";
  string pattern = "GEEK";
  int q = 101;
  rabinKarpAlgo(pattern, text, q);
}

---------------------------------------------------------------------------------------------------
#include<iostream>
using namespace std;
#include<string>
#include<math.h>
#include <vector>
int valueOf(char c)
{
    if ('0' <= c && c <= '9') return c - '0';
    if ('A' <= c && c <= 'Z') return c - 'A' + 10;
    if ('a' <= c && c <= 'z') return c - 'a' + 36;
}
bool check_characters(string T, string P, int s)
{
    int n,m,i;
    n = T.length();
    m = P.length();
    
    for(i=0;i<m;i++)
    {
        if(P[i]!=T[s+i+1])
            return false;
    }
    return true;
}
void rabin_karp_matcher(string T, string P, int d, int q)
{
    int n, m, h, p, t0, i,s;
    int count=0;
    vector<int> v;
    n = T.length();
    m = P.length();
    h = (int)pow(d,m-1)%q;
    
    p = 0;
    t0 = 0;
    for(i=0;i<m;i++)
    {
        p = p + valueOf(P[i]);
        t0 = t0 + valueOf(T[i]);
    }
    for(s=-1;s<n-m;s++)
    {
        
        if(p==t0)
        {
           if (check_characters(T,P,s))
                v.push_back(s+1);
            else count++;
        }
        if(s<n-m)
            t0 = (t0-valueOf(T[s+1])+valueOf(T[s+m+1]));
    }
    cout<<count<<endl;
    for(int i=0;i<v.size();i++)
    {
        cout<<v[i]<<endl;
    }
}

---------------------------------------------------------------------------------------------------
Variation: Approximate String Matching (Edit Distance-based Matching)
#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Function to compute the minimum edit distance between two strings
int editDistance(string str1, string str2) {
    int m = str1.size();
    int n = str2.size();

    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));

    // Initialize the DP table
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            if (i == 0)
                dp[i][j] = j; // Insert all characters of str2
            else if (j == 0)
                dp[i][j] = i; // Remove all characters of str1
            else if (str1[i - 1] == str2[j - 1])
                dp[i][j] = dp[i - 1][j - 1]; // Characters match
            else
                dp[i][j] = 1 + min({dp[i - 1][j],   // Remove
                                    dp[i][j - 1],   // Insert
                                    dp[i - 1][j - 1]}); // Substitute
        }
    }

    return dp[m][n];
}

int main() {
    string str1, str2;
    cout << "Enter the first string: ";
    cin >> str1;
    cout << "Enter the second string: ";
    cin >> str2;

    int distance = editDistance(str1, str2);
    cout << "Minimum edit distance: " << distance << endl;

    return 0;
}
----------------------------------------------------------------------------


---------------------------------------N-Queens---------------------------------
#include <iostream>
#include <vector>
using namespace std;

bool isSafe(int row, int col, vector<vector<int>>& board) {
 
    if ((row + col) % 3 == 0) return false;
    for (int i = 0; i < row; i++) {
        if (board[i][col] == 1) return false;
    }

    return true;
}

void solve(int row, int m, int n, vector<vector<int>>& board, int& solutions) {
    if (row == m) {
           solutions++;
        return;
    }

    for (int col = 0; col < n; col++) {
        if (isSafe(row, col, board)) {
            board[row][col] = 1; 
            solve(row + 1, m, n, board, solutions);
            board[row][col] = 0;
        }
    }
}

int main() {
    int m, n;
    cin >> m >> n;
    vector<vector<int>> board(m, vector<int>(n, 0));
    int solutions = 0;
    solve(0, m, n, board, solutions);
    cout << "Number of solutions: " << solutions << endl;
    return 0;
}
