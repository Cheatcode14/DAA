#---------------------------ROD_Cutting----------------------

// rod cutting recursion
#include <bits/stdc++.h>
using namespace std;

int cutRodRecur(int i, vector<int> &price) {
    if (i==0) return 0;   
    int ans = 0;   
    for (int j=1; j<=i; j++) {
        ans = max(ans, price[j-1]+cutRodRecur(i-j, price));
    }    
    return ans;
}
int cutRod(vector<int> &price) {
    int n = price.size();    
    return cutRodRecur(n, price);
}
int main() {
    vector<int> price =  { 1, 5, 8, 9, 10, 17, 17, 20};
    cout << cutRod(price);
    return 0;
}

//rod cutting top-down
#include <bits/stdc++.h>
using namespace std;
int cutRodRecur(int i, vector<int> &price, vector<int> &memo) {
    if (i==0) return 0;
    if (memo[i-1]!=-1) return memo[i-1];    
    int ans = 0;
    for (int j=1; j<=i; j++) {
        ans = max(ans, price[j-1]+cutRodRecur(i-j, price, memo));
    }    
    return memo[i-1] = ans;
}
int cutRod(vector<int> &price) {
    int n = price.size();
    vector<int> memo(price.size(), -1);
    return cutRodRecur(n, price, memo);
}
int main() {
    vector<int> price =  { 1, 5, 8, 9, 10, 17, 17, 20};
    cout << cutRod(price);
    return 0;
}

//rod bottom-up
#include <bits/stdc++.h>
using namespace std;
int cutRod(vector<int> &price) {
    int n = price.size();
    vector<int> dp(price.size()+1, 0);
    for (int i=1; i<=n; i++) {
        for (int j=1; j<=i; j++) {
            dp[i] = max(dp[i], price[j-1]+dp[i-j]);
        }
    }
    
    return dp[n];
}
int main() {
    vector<int> price =  { 1, 5, 8, 9, 10, 17, 17, 20};
    cout << cutRod(price);
    return 0;
}

//rod cut with the pieces
#include <bits/stdc++.h>
using namespace std;
int cutRod(vector<int> &price, vector<int> &solution) {
    int n = price.size();
    vector<int> dp(n + 1, 0);
    vector<int> cuts(n + 1, 0);  
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= i; j++) {
            if (dp[i] < price[j - 1] + dp[i - j]) {
                dp[i] = price[j - 1] + dp[i - j];
                cuts[i] = j; // Store the last cut length
            }
        }
    }
    
    int length = n;
    while (length > 0) {
        solution.push_back(cuts[length]);
        length -= cuts[length];
    }    
    return dp[n];
}

int main() {
    vector<int> price = {1, 5, 8, 9, 10, 17, 17, 20};
    vector<int> solution;
    
    int maxProfit = cutRod(price, solution);
    
    cout << "Maximum Profit: " << maxProfit << "\n";
    cout << "Rod is cut into lengths: ";
    for (int cut : solution) {
        cout << cut << " ";
    }
    cout << endl;
    
    return 0;
}
#---------------------------LCS-----------------------------------


// A Naive recursive implementation of LCS problem
#include <bits/stdc++.h>
using namespace std;
int lcsRec(string &s1, string &s2,int m,int n) {
        if (m == 0 || n == 0)
        return 0;
    if (s1[m - 1] == s2[n - 1])
              return 1 + lcsRec(s1, s2, m - 1, n - 1);

    else
        return max(lcsRec(s1, s2, m, n - 1), lcsRec(s1, s2, m - 1, n));
}
int lcs(string &s1,string &s2){
    int m = s1.size(), n = s2.size();
    return lcsRec(s1,s2,m,n);
}
int main() {
    string s1 = "AGGTAB";
    string s2 = "GXTXAYB";
    int m = s1.size();
    int n = s2.size();
    cout << lcs(s1, s2) << endl;

    return 0;
}


// C++ implementation of Top-Down DP
#include <bits/stdc++.h>
using namespace std;
int lcsRec(string &s1, string &s2, int m, int n, vector<vector<int>> &memo) {
    if (m == 0 || n == 0)
        return 0;
    if (memo[m][n] != -1)
        return memo[m][n];
    if (s1[m - 1] == s2[n - 1])
        return memo[m][n] = 1 + lcsRec(s1, s2, m - 1, n - 1, memo);
    return memo[m][n] = max(lcsRec(s1, s2, m, n - 1, memo), lcsRec(s1, s2, m - 1, n, memo));
}
int lcs(string &s1,string &s2){
    int m = s1.length();
    int n = s2.length();
    vector<vector<int>> memo(m + 1, vector<int>(n + 1, -1));
    return lcsRec(s1, s2, m, n, memo);
}
int main() {
    string s1 = "AGGTAB";
    string s2 = "GXTXAYB";
    cout << lcs(s1, s2) << endl;
    return 0;
}


//bottom up
#include <iostream>
#include <vector>
using namespace std;
int lcs(string &s1, string &s2) {
    int m = s1.size();
    int n = s2.size();
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (s1[i - 1] == s2[j - 1])
                dp[i][j] = dp[i - 1][j - 1] + 1;
            else
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
        }
    }
    return dp[m][n];
}
int main() {
    string s1 = "AGGTAB";
    string s2 = "GXTXAYB";
    cout << lcs(s1, s2) << endl;
    return 0;
}

//bottom up with lcs string
#include <iostream>
#include <vector>
using namespace std;
string lcs(string &s1, string &s2) {
    int m = s1.size();
    int n = s2.size();
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
   vector<vector<char>> direction(m + 1, vector<char>(n + 1, ' '));
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (s1[i - 1] == s2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
                direction[i][j] = '↖';  // Match, move diagonally
            } else if (dp[i - 1][j] >= dp[i][j - 1]) {
                dp[i][j] = dp[i - 1][j];
                direction[i][j] = '↑';  // Take value from top
            } else {
                dp[i][j] = dp[i][j - 1];
                direction[i][j] = '←';  // Take value from left
            }
        }
    }
    cout << "LCS Length Table with Direction:\n";
    for (int i = 0; i <= m; ++i) {
        for (int j = 0; j <= n; ++j) {
            if (i == 0 || j == 0) {
                cout << " 0  ";  // Base case (first row and column)
            } else {
                cout << " " << dp[i][j] << direction[i][j] << " ";
            }
        }
        cout << endl;
    }

    // Backtrack to find LCS
    string lcs_str = "";
    int i = m, j = n;
    while (i > 0 && j > 0) {
        if (direction[i][j] == '↖') {
            lcs_str = s1[i - 1] + lcs_str;  // Add character to LCS
            i--; j--;  // Move diagonally
        } else if (direction[i][j] == '↑') {
            i--;  // Move up
        } else {
            j--;  // Move left
        }
    }

    return lcs_str;
}
int main() {
    string s1 = "AGGTAB";
    string s2 = "GXTXAYB";
    string result = lcs(s1, s2);
    cout << "\nLongest Common Subsequence: " << result << endl;
    return 0;
}


//bottom up with all lcs
#include <iostream>
#include <vector>
#include <set>
using namespace std;
vector<vector<int>> computeLCSLength(string &s1, string &s2) {
    int m = s1.size();
    int n = s2.size();
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (s1[i - 1] == s2[j - 1])
                dp[i][j] = dp[i - 1][j - 1] + 1;
            else
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
        }
    }
    return dp;
}

void findAllLCS(int i, int j, string &s1, string &s2, 
                vector<vector<int>> &dp, string currentLCS, set<string> &lcsSet) {
    if (i == 0 || j == 0) {
        lcsSet.insert(currentLCS);
        return;
    }
    if (s1[i - 1] == s2[j - 1]) {
        findAllLCS(i - 1, j - 1, s1, s2, dp, s1[i - 1] + currentLCS, lcsSet);
    } else {
        if (dp[i - 1][j] == dp[i][j])
            findAllLCS(i - 1, j, s1, s2, dp, currentLCS, lcsSet);
        if (dp[i][j - 1] == dp[i][j])
            findAllLCS(i, j - 1, s1, s2, dp, currentLCS, lcsSet);
    }
}
set<string> getAllLCS(string &s1, string &s2) {
    vector<vector<int>> dp = computeLCSLength(s1, s2);
    set<string> lcsSet;
    findAllLCS(s1.size(), s2.size(), s1, s2, dp, "", lcsSet);
    return lcsSet;
}
int main() {
    string s1 = "AGTGATG";
    string s2 = "GTTAG";
    set<string> lcsSet = getAllLCS(s1, s2);
    cout << "Longest Common Subsequences:\n";
    for (const string &seq : lcsSet) {
        cout << seq << endl;
    }

    return 0;
}



#----------------------------------------Matrix multiplication-------------------------------------

// matrix chain multiplication using recursion
#include <bits/stdc++.h>
using namespace std;
int minMultRec(vector<int> &arr, int i, int j) {
    if (i + 1 == j)
        return 0;
    int res = INT_MAX;
    for (int k = i + 1; k < j; k++) {
        int curr = minMultRec(arr, i, k) + 
        minMultRec(arr, k, j) + arr[i] * arr[k] * arr[j];

       res = min(curr, res);
    }
    return res;
}
int matrixMultiplication(vector<int> &arr) {
        int n = arr.size();
    return minMultRec(arr, 0, n - 1);
}
int main() {
  
    vector<int> arr = {1, 2, 3, 4, 3};
    cout << matrixMultiplication(arr);
    return 0;
}







//bottom up and top down
#include <bits/stdc++.h>
using namespace std;

// Function to print optimal parenthesization
void printOptimalParens(vector<vector<int>> &split, int i, int j, char &name) {
    if (i == j) {
        cout << name++;  // Print matrix name (A, B, C, ...)
        return;
    }
    cout << "(";
    printOptimalParens(split, i, split[i][j], name);   // Left part
    printOptimalParens(split, split[i][j] + 1, j, name); // Right part
    cout << ")";
}

// **Top-Down (Memoized Recursion)**
int matrixChainMemo(vector<int> &dims, int i, int j, vector<vector<int>> &dp, vector<vector<int>> &split) {
    if (i == j) return 0; // Single matrix, no multiplication

    if (dp[i][j] != -1) return dp[i][j]; // Return memoized value

    int minCost = INT_MAX;
    for (int k = i; k < j; k++) {
        int cost = matrixChainMemo(dims, i, k, dp, split) + 
                   matrixChainMemo(dims, k + 1, j, dp, split) +
                   dims[i - 1] * dims[k] * dims[j];

        if (cost < minCost) {
            minCost = cost;
            split[i][j] = k; // Store split point
        }
    }
    
    return dp[i][j] = minCost;
}

// **Bottom-Up (Tabulation)**
int matrixChainBottomUp(vector<int> &dims, vector<vector<int>> &split) {
    int n = dims.size();
    vector<vector<int>> dp(n, vector<int>(n, 0));

    // Chain length
    for (int len = 2; len < n; len++) {
        for (int i = 1; i < n - len + 1; i++) {
            int j = i + len - 1;
            dp[i][j] = INT_MAX;

            for (int k = i; k < j; k++) {
                int cost = dp[i][k] + dp[k + 1][j] + dims[i - 1] * dims[k] * dims[j];

                if (cost < dp[i][j]) {
                    dp[i][j] = cost;
                    split[i][j] = k; // Store split point
                }
            }
        }
    }
    
    return dp[1][n - 1];
}

int main() {
    vector<int> dims = {40, 20, 30, 10, 30}; // Example: A(40x20), B(20x30), C(30x10), D(10x30)
    int n = dims.size();

    // **Top-Down Approach**
    vector<vector<int>> dp(n, vector<int>(n, -1));
    vector<vector<int>> split(n, vector<int>(n, 0));
    int minCostTopDown = matrixChainMemo(dims, 1, n - 1, dp, split);
    
    cout << "Minimum Cost (Top-Down): " << minCostTopDown << endl;
    cout << "Optimal Parenthesization (Top-Down): ";
    char name = 'A';
    printOptimalParens(split, 1, n - 1, name);
    cout << endl;

    // **Bottom-Up Approach**
    vector<vector<int>> splitBottomUp(n, vector<int>(n, 0));
    int minCostBottomUp = matrixChainBottomUp(dims, splitBottomUp);

    cout << "Minimum Cost (Bottom-Up): " << minCostBottomUp << endl;
    cout << "Optimal Parenthesization (Bottom-Up): ";
    name = 'A';
    printOptimalParens(splitBottomUp, 1, n - 1, name);
    cout << endl;

    return 0;
}


